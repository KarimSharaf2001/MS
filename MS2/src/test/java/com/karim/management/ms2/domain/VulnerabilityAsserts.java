package com.karim.management.ms2.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VulnerabilityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVulnerabilityAllPropertiesEquals(Vulnerability expected, Vulnerability actual) {
        assertVulnerabilityAutoGeneratedPropertiesEquals(expected, actual);
        assertVulnerabilityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVulnerabilityAllUpdatablePropertiesEquals(Vulnerability expected, Vulnerability actual) {
        assertVulnerabilityUpdatableFieldsEquals(expected, actual);
        assertVulnerabilityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVulnerabilityAutoGeneratedPropertiesEquals(Vulnerability expected, Vulnerability actual) {
        assertThat(expected)
            .as("Verify Vulnerability auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVulnerabilityUpdatableFieldsEquals(Vulnerability expected, Vulnerability actual) {
        assertThat(expected)
            .as("Verify Vulnerability relevant properties")
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getSeverity()).as("check severity").isEqualTo(actual.getSeverity()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVulnerabilityUpdatableRelationshipsEquals(Vulnerability expected, Vulnerability actual) {
        // empty method
    }
}

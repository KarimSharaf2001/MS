package com.karim.management.ms2.web.rest;

import static com.karim.management.ms2.domain.VulnerabilityAsserts.*;
import static com.karim.management.ms2.web.rest.TestUtil.createUpdateProxyForBean;
import static org.assertj.core.api.Assertions.assertThat;
import static org.hamcrest.Matchers.hasItem;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.karim.management.ms2.IntegrationTest;
import com.karim.management.ms2.domain.Vulnerability;
import com.karim.management.ms2.repository.VulnerabilityRepository;
import jakarta.persistence.EntityManager;
import java.util.Random;
import java.util.concurrent.atomic.AtomicLong;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

/**
 * Integration tests for the {@link VulnerabilityResource} REST controller.
 */
@IntegrationTest
@AutoConfigureMockMvc
@WithMockUser
class VulnerabilityResourceIT {

    private static final String DEFAULT_TYPE = "AAAAAAAAAA";
    private static final String UPDATED_TYPE = "BBBBBBBBBB";

    private static final String DEFAULT_SEVERITY = "AAAAAAAAAA";
    private static final String UPDATED_SEVERITY = "BBBBBBBBBB";

    private static final String DEFAULT_DESCRIPTION = "AAAAAAAAAA";
    private static final String UPDATED_DESCRIPTION = "BBBBBBBBBB";

    private static final String ENTITY_API_URL = "/api/vulnerabilities";
    private static final String ENTITY_API_URL_ID = ENTITY_API_URL + "/{id}";

    private static Random random = new Random();
    private static AtomicLong longCount = new AtomicLong(random.nextInt() + (2 * Integer.MAX_VALUE));

    @Autowired
    private ObjectMapper om;

    @Autowired
    private VulnerabilityRepository vulnerabilityRepository;

    @Autowired
    private EntityManager em;

    @Autowired
    private MockMvc restVulnerabilityMockMvc;

    private Vulnerability vulnerability;

    private Vulnerability insertedVulnerability;

    /**
     * Create an entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static Vulnerability createEntity() {
        return new Vulnerability().type(DEFAULT_TYPE).severity(DEFAULT_SEVERITY).description(DEFAULT_DESCRIPTION);
    }

    /**
     * Create an updated entity for this test.
     *
     * This is a static method, as tests for other entities might also need it,
     * if they test an entity which requires the current entity.
     */
    public static Vulnerability createUpdatedEntity() {
        return new Vulnerability().type(UPDATED_TYPE).severity(UPDATED_SEVERITY).description(UPDATED_DESCRIPTION);
    }

    @BeforeEach
    public void initTest() {
        vulnerability = createEntity();
    }

    @AfterEach
    public void cleanup() {
        if (insertedVulnerability != null) {
            vulnerabilityRepository.delete(insertedVulnerability);
            insertedVulnerability = null;
        }
    }

    @Test
    @Transactional
    void createVulnerability() throws Exception {
        long databaseSizeBeforeCreate = getRepositoryCount();
        // Create the Vulnerability
        var returnedVulnerability = om.readValue(
            restVulnerabilityMockMvc
                .perform(post(ENTITY_API_URL).contentType(MediaType.APPLICATION_JSON).content(om.writeValueAsBytes(vulnerability)))
                .andExpect(status().isCreated())
                .andReturn()
                .getResponse()
                .getContentAsString(),
            Vulnerability.class
        );

        // Validate the Vulnerability in the database
        assertIncrementedRepositoryCount(databaseSizeBeforeCreate);
        assertVulnerabilityUpdatableFieldsEquals(returnedVulnerability, getPersistedVulnerability(returnedVulnerability));

        insertedVulnerability = returnedVulnerability;
    }

    @Test
    @Transactional
    void createVulnerabilityWithExistingId() throws Exception {
        // Create the Vulnerability with an existing ID
        vulnerability.setId(1L);

        long databaseSizeBeforeCreate = getRepositoryCount();

        // An entity with an existing ID cannot be created, so this API call must fail
        restVulnerabilityMockMvc
            .perform(post(ENTITY_API_URL).contentType(MediaType.APPLICATION_JSON).content(om.writeValueAsBytes(vulnerability)))
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        assertSameRepositoryCount(databaseSizeBeforeCreate);
    }

    @Test
    @Transactional
    void getAllVulnerabilities() throws Exception {
        // Initialize the database
        insertedVulnerability = vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilityList
        restVulnerabilityMockMvc
            .perform(get(ENTITY_API_URL + "?sort=id,desc"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$.[*].id").value(hasItem(vulnerability.getId().intValue())))
            .andExpect(jsonPath("$.[*].type").value(hasItem(DEFAULT_TYPE)))
            .andExpect(jsonPath("$.[*].severity").value(hasItem(DEFAULT_SEVERITY)))
            .andExpect(jsonPath("$.[*].description").value(hasItem(DEFAULT_DESCRIPTION)));
    }

    @Test
    @Transactional
    void getVulnerability() throws Exception {
        // Initialize the database
        insertedVulnerability = vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get the vulnerability
        restVulnerabilityMockMvc
            .perform(get(ENTITY_API_URL_ID, vulnerability.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
            .andExpect(jsonPath("$.id").value(vulnerability.getId().intValue()))
            .andExpect(jsonPath("$.type").value(DEFAULT_TYPE))
            .andExpect(jsonPath("$.severity").value(DEFAULT_SEVERITY))
            .andExpect(jsonPath("$.description").value(DEFAULT_DESCRIPTION));
    }

    @Test
    @Transactional
    void getNonExistingVulnerability() throws Exception {
        // Get the vulnerability
        restVulnerabilityMockMvc.perform(get(ENTITY_API_URL_ID, Long.MAX_VALUE)).andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    void putExistingVulnerability() throws Exception {
        // Initialize the database
        insertedVulnerability = vulnerabilityRepository.saveAndFlush(vulnerability);

        long databaseSizeBeforeUpdate = getRepositoryCount();

        // Update the vulnerability
        Vulnerability updatedVulnerability = vulnerabilityRepository.findById(vulnerability.getId()).orElseThrow();
        // Disconnect from session so that the updates on updatedVulnerability are not directly saved in db
        em.detach(updatedVulnerability);
        updatedVulnerability.type(UPDATED_TYPE).severity(UPDATED_SEVERITY).description(UPDATED_DESCRIPTION);

        restVulnerabilityMockMvc
            .perform(
                put(ENTITY_API_URL_ID, updatedVulnerability.getId())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(om.writeValueAsBytes(updatedVulnerability))
            )
            .andExpect(status().isOk());

        // Validate the Vulnerability in the database
        assertSameRepositoryCount(databaseSizeBeforeUpdate);
        assertPersistedVulnerabilityToMatchAllProperties(updatedVulnerability);
    }

    @Test
    @Transactional
    void putNonExistingVulnerability() throws Exception {
        long databaseSizeBeforeUpdate = getRepositoryCount();
        vulnerability.setId(longCount.incrementAndGet());

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(
                put(ENTITY_API_URL_ID, vulnerability.getId())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(om.writeValueAsBytes(vulnerability))
            )
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        assertSameRepositoryCount(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void putWithIdMismatchVulnerability() throws Exception {
        long databaseSizeBeforeUpdate = getRepositoryCount();
        vulnerability.setId(longCount.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(
                put(ENTITY_API_URL_ID, longCount.incrementAndGet())
                    .contentType(MediaType.APPLICATION_JSON)
                    .content(om.writeValueAsBytes(vulnerability))
            )
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        assertSameRepositoryCount(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void putWithMissingIdPathParamVulnerability() throws Exception {
        long databaseSizeBeforeUpdate = getRepositoryCount();
        vulnerability.setId(longCount.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(put(ENTITY_API_URL).contentType(MediaType.APPLICATION_JSON).content(om.writeValueAsBytes(vulnerability)))
            .andExpect(status().isMethodNotAllowed());

        // Validate the Vulnerability in the database
        assertSameRepositoryCount(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void partialUpdateVulnerabilityWithPatch() throws Exception {
        // Initialize the database
        insertedVulnerability = vulnerabilityRepository.saveAndFlush(vulnerability);

        long databaseSizeBeforeUpdate = getRepositoryCount();

        // Update the vulnerability using partial update
        Vulnerability partialUpdatedVulnerability = new Vulnerability();
        partialUpdatedVulnerability.setId(vulnerability.getId());

        partialUpdatedVulnerability.type(UPDATED_TYPE).description(UPDATED_DESCRIPTION);

        restVulnerabilityMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, partialUpdatedVulnerability.getId())
                    .contentType("application/merge-patch+json")
                    .content(om.writeValueAsBytes(partialUpdatedVulnerability))
            )
            .andExpect(status().isOk());

        // Validate the Vulnerability in the database

        assertSameRepositoryCount(databaseSizeBeforeUpdate);
        assertVulnerabilityUpdatableFieldsEquals(
            createUpdateProxyForBean(partialUpdatedVulnerability, vulnerability),
            getPersistedVulnerability(vulnerability)
        );
    }

    @Test
    @Transactional
    void fullUpdateVulnerabilityWithPatch() throws Exception {
        // Initialize the database
        insertedVulnerability = vulnerabilityRepository.saveAndFlush(vulnerability);

        long databaseSizeBeforeUpdate = getRepositoryCount();

        // Update the vulnerability using partial update
        Vulnerability partialUpdatedVulnerability = new Vulnerability();
        partialUpdatedVulnerability.setId(vulnerability.getId());

        partialUpdatedVulnerability.type(UPDATED_TYPE).severity(UPDATED_SEVERITY).description(UPDATED_DESCRIPTION);

        restVulnerabilityMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, partialUpdatedVulnerability.getId())
                    .contentType("application/merge-patch+json")
                    .content(om.writeValueAsBytes(partialUpdatedVulnerability))
            )
            .andExpect(status().isOk());

        // Validate the Vulnerability in the database

        assertSameRepositoryCount(databaseSizeBeforeUpdate);
        assertVulnerabilityUpdatableFieldsEquals(partialUpdatedVulnerability, getPersistedVulnerability(partialUpdatedVulnerability));
    }

    @Test
    @Transactional
    void patchNonExistingVulnerability() throws Exception {
        long databaseSizeBeforeUpdate = getRepositoryCount();
        vulnerability.setId(longCount.incrementAndGet());

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, vulnerability.getId())
                    .contentType("application/merge-patch+json")
                    .content(om.writeValueAsBytes(vulnerability))
            )
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        assertSameRepositoryCount(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void patchWithIdMismatchVulnerability() throws Exception {
        long databaseSizeBeforeUpdate = getRepositoryCount();
        vulnerability.setId(longCount.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(
                patch(ENTITY_API_URL_ID, longCount.incrementAndGet())
                    .contentType("application/merge-patch+json")
                    .content(om.writeValueAsBytes(vulnerability))
            )
            .andExpect(status().isBadRequest());

        // Validate the Vulnerability in the database
        assertSameRepositoryCount(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void patchWithMissingIdPathParamVulnerability() throws Exception {
        long databaseSizeBeforeUpdate = getRepositoryCount();
        vulnerability.setId(longCount.incrementAndGet());

        // If url ID doesn't match entity ID, it will throw BadRequestAlertException
        restVulnerabilityMockMvc
            .perform(patch(ENTITY_API_URL).contentType("application/merge-patch+json").content(om.writeValueAsBytes(vulnerability)))
            .andExpect(status().isMethodNotAllowed());

        // Validate the Vulnerability in the database
        assertSameRepositoryCount(databaseSizeBeforeUpdate);
    }

    @Test
    @Transactional
    void deleteVulnerability() throws Exception {
        // Initialize the database
        insertedVulnerability = vulnerabilityRepository.saveAndFlush(vulnerability);

        long databaseSizeBeforeDelete = getRepositoryCount();

        // Delete the vulnerability
        restVulnerabilityMockMvc
            .perform(delete(ENTITY_API_URL_ID, vulnerability.getId()).accept(MediaType.APPLICATION_JSON))
            .andExpect(status().isNoContent());

        // Validate the database contains one less item
        assertDecrementedRepositoryCount(databaseSizeBeforeDelete);
    }

    protected long getRepositoryCount() {
        return vulnerabilityRepository.count();
    }

    protected void assertIncrementedRepositoryCount(long countBefore) {
        assertThat(countBefore + 1).isEqualTo(getRepositoryCount());
    }

    protected void assertDecrementedRepositoryCount(long countBefore) {
        assertThat(countBefore - 1).isEqualTo(getRepositoryCount());
    }

    protected void assertSameRepositoryCount(long countBefore) {
        assertThat(countBefore).isEqualTo(getRepositoryCount());
    }

    protected Vulnerability getPersistedVulnerability(Vulnerability vulnerability) {
        return vulnerabilityRepository.findById(vulnerability.getId()).orElseThrow();
    }

    protected void assertPersistedVulnerabilityToMatchAllProperties(Vulnerability expectedVulnerability) {
        assertVulnerabilityAllPropertiesEquals(expectedVulnerability, getPersistedVulnerability(expectedVulnerability));
    }

    protected void assertPersistedVulnerabilityToMatchUpdatableProperties(Vulnerability expectedVulnerability) {
        assertVulnerabilityAllUpdatablePropertiesEquals(expectedVulnerability, getPersistedVulnerability(expectedVulnerability));
    }
}
